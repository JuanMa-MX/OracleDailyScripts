#!/bin/bash

#--------------------------------------------------------------------------------#

function obtenerListadoDeBasesDeDatos()
{
   listaDeBases=$(grep -Ev "^$|#" ${ORATAB} | grep ".*:.*:Y$" | cut -d":" -f1 | xargs);
   echo ${listaDeBases};
}

#--------------------------------------------------------------------------------#

function ORAENV()
{
   export ORACLE_SID="${1}";
   export ORAENV_ASK="NO";
   . oraenv -s &> /dev/null;
   export ORAENV_ASK="YES";
   export LD_LIBRARY_PATH=${ORACLE_HOME}/lib;
   export TNS_ADMIN=${ORACLE_HOME}/network/admin;
}

#--------------------------------------------------------------------------------#

function obtenerEstadoDeBaseDeDatos()
{
   ESTADO=$(sqlplus -S / AS SYSDBA <<_script_
SET FEEDBACK OFF
SET PAGES 0
SET HEADING OFF

SELECT status FROM v\$instance;

EXIT;
_script_
);

   case "${ESTADO}" in
   "STARTED"|"MOUNTED"|"OPEN")
      echo "${ESTADO}";
   ;;
   *)
      echo "UNKNOWN";
   ;;
   esac
}

#--------------------------------------------------------------------------------#

function levantarEnModoMount()
{
   sqlplus -S &> /dev/null <<_script_
CONNECT / AS SYSDBA

STARTUP MOUNT;

EXIT;
_script_
}

#--------------------------------------------------------------------------------#

function obtenerRolDeBaseDeDatos()
{
   ROL=$(sqlplus -S / AS SYSDBA <<_script_
SET FEEDBACK OFF
SET PAGES 0
SET HEADING OFF

SELECT database_role FROM v\$database;

EXIT;
_script_
);

   case "${ROL}" in
   "PRIMARY"|"LOGICAL STANDBY"|"PHYSICAL STANDBY")
      echo "${ROL}";
   ;;
   *)
      echo "UNKNOWN";
   ;;
   esac
}

#--------------------------------------------------------------------------------#

function abrirBaseDeDatos()
{
   sqlplus -S &> /dev/null <<_script_
CONNECT / AS SYSDBA

ALTER DATABASE OPEN;

EXIT;
_script_
}

#--------------------------------------------------------------------------------#

function activarRecuperacionDeBaseDeDatos()
{
   sqlplus -S &> /dev/null <<_script_
CONNECT / AS SYSDBA

ALTER DATABASE RECOVER MANAGED STANDBY DATABASE DISCONNECT;

EXIT;
_script_
}

#--------------------------------------------------------------------------------#

function obtenerEstadoDeRecuperacion()
{
   ESTADO=$(sqlplus -S / AS SYSDBA <<_script_
SET FEEDBACK OFF
SET PAGES 0
SET HEADING OFF

SELECT 'ACTIVE' col FROM v\$managed_standby
WHERE process LIKE 'MRP%'
AND ROWNUM < 2;

EXIT;
_script_
);

   case "${ESTADO}" in
   "ACTIVE")
      echo "${ESTADO}";
   ;;
   *)
      echo "INACTIVE";
   ;;
   esac
}

#--------------------------------------------------------------------------------#

function levantaBaseDeDatos()
{
   for base in $(obtenerListadoDeBasesDeDatos)
   do
      ORAENV "${base}";
      levantarEnModoMount;

      ESTADO="$(obtenerEstadoDeBaseDeDatos)";

      case "${ESTADO}" in
      "MOUNTED"|"OPEN")
         echo "[OK] Base de Datos '${base}' montada correctamente.";

         ROL="$(obtenerRolDeBaseDeDatos)";
         echo "[INFO] Rol de Base De Datos '${ROL}' encontrado.";

         case "${ROL}" in
         "PHYSICAL STANDBY")
            activarRecuperacionDeBaseDeDatos;

            ESTADO="$(obtenerEstadoDeRecuperacion)";

            if [ "${ESTADO}" == "ACTIVE" ];
            then
               echo "[OK] Recuperacion de Base de Datos '${base}' activa.";
            else
               echo "[ERROR] Recuperacion de Base de Datos '${base}' inactiva.";
            fi
         ;;
         *)
            if [ "${ESTADO}" == "MOUNTED" ];
            then
               abrirBaseDeDatos;
               ESTADO="$(obtenerEstadoDeBaseDeDatos)";

               if [ "${ESTADO}" == "OPEN" ];
               then
                  echo "[OK] Base de Datos '${base}' abierta correctamente.";
               else
                  echo "[ERROR] Error al abrir la Base de Datos '${base}'.";
               fi
            else
               echo "[OK] Base de Datos '${base}' abierta correctamente.";
            fi
         ;;
         esac
      ;;
      *)
         echo "[ERROR] Error al montar la Base de Datos '${base}'.";
      ;;
      esac
   done
}

#--------------------------------------------------------------------------------#

function obtenerListadoListeners()
{
   LISTENER=${TNS_ADMIN}/listener.ora;
   listaDeListeners=$(sed -e 's/=/\n/g' ${LISTENER} | sed -e 's/ //g' | \
                      grep -i "^listener" | grep -iv ".log" | \
                      grep -vw "LISTENER" | awk '{print toupper($0)}');
   echo ${listaDeListeners};
}

#--------------------------------------------------------------------------------#

function obtenerEstadoDeListener()
{
   if [ $(ps -ef | grep "tnslsnr" | grep -icw ${1}) -eq 1 ];
   then
      echo "ACTIVE";
   else
      echo "INACTIVE";
   fi
}

#--------------------------------------------------------------------------------#

function levantaListener()
{
   lsnrctl start ${1} &> /dev/null

   if [ "$(obtenerEstadoDeListener "${1}")" == "ACTIVE" ];
   then
      echo "OK";
   else
      echo "ERROR";
   fi
}

#--------------------------------------------------------------------------------#

function levantaListeners()
{
   for base in $(obtenerListadoDeBasesDeDatos)
   do
      ORAENV "${base}";

      for listener in $(obtenerListadoListeners)
      do
         if [ "$(levantaListener "${listener}")" == "OK" ];
         then
            echo "[OK] Listener '${listener}' activo correctamente.";
         else
            echo "[ERROR] Error al activar el Listener '${listener}'.";
         fi
      done
   done
}

#--------------------------------------------------------------------------------#

function main()
{
ORATAB="/etc/oratab";

echo "";
echo "#--------------------------------------------------------------------------------#";
date;
echo "";
echo ">> Bases de Datos";
levantaBaseDeDatos;
echo "";
echo ">> Listeners";
levantaListeners;
}

#--------------------------------------------------------------------------------#

main;
